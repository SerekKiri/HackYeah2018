package com.example.fitlocker.flutter


import android.app.Activity
import android.content.Context
import android.os.Bundle
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleObserver
import androidx.lifecycle.OnLifecycleEvent

import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.StringCodec
import io.flutter.view.FlutterMain
import io.flutter.view.FlutterNativeView
import io.flutter.view.FlutterRunArguments
import io.flutter.view.FlutterView
import io.flutter.plugins.GeneratedPluginRegistrant

/**
 * Main entry point for using Flutter in Android applications.
 *
 *
 * **Warning:** This file is auto-generated by Flutter tooling.
 * DO NOT EDIT.
 */
object Flutter {

    /**
     * Initiates the Dart VM. Calling this method at an early point may help decreasing time to first
     * frame for a subsequently created [FlutterView].
     *
     * @param applicationContext the application's [Context]
     */
    fun startInitialization(applicationContext: Context) {
        FlutterMain.startInitialization(applicationContext)
    }

    /**
     * Creates a [FlutterFragment] managing a [FlutterView]. The optional
     * initial route string will be made available to the Dart code
     * (via `window.defaultRouteName`) and may be used to determine which widget
     * should be displayed in the view. The default initialRoute is "/".
     *
     * @param initialRoute an initial route [String], or null
     * @return a [FlutterFragment]
     */
    fun createFragment(initialRoute: String): FlutterFragment {
        val fragment = FlutterFragment()
        val args = Bundle()
        args.putString(FlutterFragment.ARG_ROUTE, initialRoute)
        fragment.arguments = args
        return fragment
    }

    /**
     * Creates a [FlutterView] linked to the specified [Activity] and [Lifecycle].
     * The optional initial route string will be made available to the Dart code (via
     * `window.defaultRouteName`) and may be used to determine which widget should be displayed
     * in the view. The default initialRoute is "/".
     *
     * @param activity an [Activity]
     * @param lifecycle a [Lifecycle]
     * @param initialRoute an initial route [String], or null
     * @return a [FlutterView]
     */
    fun createView(activity: Activity, lifecycle: Lifecycle, initialRoute: String?): FlutterView {
        FlutterMain.startInitialization(activity.applicationContext)
        FlutterMain.ensureInitializationComplete(activity.applicationContext, null)
        val nativeView = FlutterNativeView(activity)
        val flutterView = object : FlutterView(activity, null, nativeView) {
            private val lifecycleMessages = BasicMessageChannel(this, "flutter/lifecycle", StringCodec.INSTANCE)
            override fun onFirstFrame() {
                super.onFirstFrame()
                alpha = 1.0f
            }

            override fun onPostResume() {
                // Overriding default behavior to avoid dictating system UI via PlatformPlugin.
                lifecycleMessages.send("AppLifecycleState.resumed")
            }
        }
        if (initialRoute != null) {
            flutterView.setInitialRoute(initialRoute)
        }
        lifecycle.addObserver(object : LifecycleObserver {
            @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
            fun onCreate() {
                val arguments = FlutterRunArguments()
                arguments.bundlePath = FlutterMain.findAppBundlePath(activity.applicationContext)
                arguments.entrypoint = "main"
                flutterView.runFromBundle(arguments)
                GeneratedPluginRegistrant.registerWith(flutterView.pluginRegistry)
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_START)
            fun onStart() {
                flutterView.onStart()
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
            fun onResume() {
                flutterView.onPostResume()
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
            fun onPause() {
                flutterView.onPause()
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
            fun onStop() {
                flutterView.onStop()
            }

            @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
            fun onDestroy() {
                flutterView.destroy()
            }
        })
        flutterView.alpha = 0.0f
        return flutterView
    }
}// to prevent instantiation